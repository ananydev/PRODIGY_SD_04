public class SudokuSolver {
    // Function to check if it is safe to place a number in a cell
    private static boolean isSafe(int[][] board, int row, int col, int num) {
        // Check the row
        for (int x = 0; x < 9; x++) {
            if (board[row][x] == num) {
                return false;
            }
        }

        // Check the column
        for (int x = 0; x < 9; x++) {
            if (board[x][col] == num) {
                return false;
            }
        }

        // Check the 3x3 subgrid
        int startRow = row - row % 3;
        int startCol = col - col % 3;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i + startRow][j + startCol] == num) {
                    return false;
                }
            }
        }

        return true;
    }

    // Function to solve the Sudoku puzzle using backtracking
    private static boolean solveSudoku(int[][] board, int row, int col) {
        // If we have reached the last cell, the puzzle is solved
        if (row == 8 && col == 9) {
            return true;
        }

        // Move to the next row if we reached the end of the column
        if (col == 9) {
            row++;
            col = 0;
        }

        // Skip already filled cells
        if (board[row][col] != 0) {
            return solveSudoku(board, row, col + 1);
        }

        // Try placing numbers 1 to 9 in the current cell
        for (int num = 1; num <= 9; num++) {
            if (isSafe(board, row, col, num)) {
                board[row][col] = num;
                // Recursively try to solve the rest of the board
                if (solveSudoku(board, row, col + 1)) {
                    return true;
                }
                // If placing the current number didn't lead to a solution, backtrack
                board[row][col] = 0;
            }
        }

        // If no number can be placed, return false
        return false;
    }

    // Function to print the Sudoku board
    private static void printBoard(int[][] board) {
        for (int r = 0; r < 9; r++) {
            for (int d = 0; d < 9; d++) {
                System.out.print(board[r][d]);
                System.out.print(" ");
            }
            System.out.print("\n");

            if ((r + 1) % 3 == 0) {
                System.out.print("");
            }
        }
    }

    public static void main(String[] args) {
        int[][] board = new int[][] {
                {5, 3, 0, 0, 7, 0, 0, 0, 0},
                {6, 0, 0, 1, 9, 5, 0, 0, 0},
                {0, 9, 8, 0, 0, 0, 0, 6, 0},
                {8, 0, 0, 0, 6, 0, 0, 0, 3},
                {4, 0, 0, 8, 0, 3, 0, 0, 1},
                {7, 0, 0, 0, 2, 0, 0, 0, 6},
                {0, 6, 0, 0, 0, 0, 2, 8, 0},
                {0, 0, 0, 4, 1, 9, 0, 0, 5},
                {0, 0, 0, 0, 8, 0, 0, 7, 9}
        };

        if (solveSudoku(board, 0, 0)) {
            printBoard(board);
        } else {
            System.out.println("No solution exists");
        }
    }
}
